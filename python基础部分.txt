1、Python是一种面向对象、解释性、动态数据的高级编程语言
	Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。

	Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。

	Python 是交互式语言： 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。

	Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。

	Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，
	它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。
2、Python 源代码同样遵循 GPL(GNU General Public License)协议。
3、集成开发工具：Pycharm("paich'm");
	相关配置：
	Pycharm 编码语言设置步骤：
		进入 file > Settings，在输入框搜索 encoding。
		找到 Editor > File encodings，将 IDE Encoding 和 Project Encoding 设置为utf-8。
4、基础
  Python 标识符
	在 Python 里，标识符由字母、数字、下划线组成。

	在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。

	Python 中的标识符是区分大小写的。

	以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；

	以双下划线开头的 __foo 代表类的私有成员；以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。

	Python 可以同一行显示多条语句，方法是用分号 ; 分开，如：

	>>> print 'hello';print 'runoob';
	hello
	runoob
5.变量赋值
	Python 中的变量赋值不需要类型声明。

	每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。

	每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。

	等号（=）用来给变量赋值。
6.标准数据类型
	在内存中存储的数据可以有多种类型。

	例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。

	Python 定义了一些标准类型，用于存储各种类型的数据。

	Python有五个标准的数据类型：
		Numbers（数字）
		String（字符串）
		List（列表）
		Tuple（元组）
		Dictionary（字典）
	Python支持四种不同的数字类型：
		int（有符号整型）
		long（长整型[也可以代表八进制和十六进制]）
		float（浮点型）
		complex（复数）
7、特有的运算符
	a**b = a的幂次方
	a//b取商的整数；
8、条件语句
	if 判断条件1:
		执行语句1……
	elif 判断条件2:
		执行语句2……
	elif 判断条件3:
		执行语句3……
	else:
		执行语句4……
9、循环
	1>while 判断条件：
			执行语句……
		例子：#!/usr/bin/python
			count = 0
			while (count < 9):
			   print 'The count is:', count
			   count = count + 1
			 
			print "Good bye!"
	2>for循环				 
		for letter in 'Python':     # 第一个实例
		   print '当前字母 :', letter
		fruits = ['banana', 'apple',  'mango']
		for fruit in fruits:        # 第二个实例
		   print '当前水果 :', fruit	 
		print "Good bye!"
10、Python 支持四种不同的数值类型：
	（1）整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。
	（2）长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。
	（3）浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，
		浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
	（4）复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,
		或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。
11、Python 列表(List)
	序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。
	Python有6个序列的内置类型，但最常见的是列表和元组。

	序列都可以进行的操作包括索引，切片，加，乘，检查成员。

	此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。

	列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。

	列表的数据项不需要具有相同的类型

	创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：

	list1 = ['physics', 'chemistry', 1997, 2000]
	list2 = [1, 2, 3, 4, 5 ]
	list3 = ["a", "b", "c", "d"]
	与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。

	访问列表中的值
	使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：

	实例(Python 2.0+)
	#!/usr/bin/python
	 
	list1 = ['physics', 'chemistry', 1997, 2000]
	list2 = [1, 2, 3, 4, 5, 6, 7 ]
	 
	print "list1[0]: ", list1[0]
	print "list2[1:5]: ", list2[1:5]
	以上实例输出结果：

	list1[0]:  physics
	list2[1:5]:  [2, 3, 4, 5]
	更新列表
	你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：
	实例(Python 2.0+)
	#!/usr/bin/python
	# -*- coding: UTF-8 -*-
	 
	list = []          ## 空列表
	list.append('Google')   ## 使用 append() 添加元素
	list.append('Runoob')
	print list
	注意：我们会在接下来的章节讨论append()方法的使用

	以上实例输出结果：

	['Google', 'Runoob']
	删除列表元素
	可以使用 del 语句来删除列表的元素，如下实例：

	实例(Python 2.0+)
	#!/usr/bin/python
	 
	list1 = ['physics', 'chemistry', 1997, 2000]
	 
	print list1
	del list1[2]
	print "After deleting value at index 2 : "
	print list1
	以上实例输出结果：

	['physics', 'chemistry', 1997, 2000]
	After deleting value at index 2 :
	['physics', 'chemistry', 2000]